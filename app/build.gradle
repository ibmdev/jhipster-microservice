evaluationDependsOn(':service-api')
afterEvaluate {
	compileJava.dependsOn('clean')
}
ext.javaVersion =  project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : '1.8'
group = 'fr.sma.bw'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

/* Dependencies */
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
	implementation 'org.jolokia:jolokia-core:1.6.2'
	implementation 'org.mapstruct:mapstruct:1.3.1.Final'
	implementation 'org.modelmapper:modelmapper:2.3.7'
	implementation 'com.ibm.db2:db2jcc4:4.19.66'
	implementation project(':service-api')
	implementation 'com.github.spotbugs:spotbugs:4.0.3'
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'
	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'io.cucumber:cucumber-junit:1.2.6'
	testImplementation 'io.cucumber:cucumber-spring:1.2.6'
	testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.3.1'
	testImplementation 'org.hamcrest:hamcrest-all:1.3'
	testImplementation 'junit:junit:4.13'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

/* Build Info Properties auto-generate by actuator/info */
springBoot {
    buildInfo()
}
/* SpotBugs */

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

/* Tests unitaires */
test {
	useJUnit()
	testLogging.showStandardStreams = true
	minHeapSize = "128m"
	maxHeapSize = "512m"
	jvmArgs '-XX:MaxPermSize=256m'
	failFast = true
	include 'fr/sma/bw/tests/unit/**'
	exclude 'fr/sma/bw/tests/integrations/**'
}
/* Tests d'intégration */
task integrationTest(type: Test) {
	useJUnit()
	testLogging.showStandardStreams = true
	minHeapSize = "128m"
	maxHeapSize = "512m"
	jvmArgs '-XX:MaxPermSize=256m'
	failFast = true
	exclude 'fr/sma/bw/tests/unit/**'
	include 'fr/sma/bw/tests/integrations/**'
}
/* Profile CI = On lance les tests d'intégration en plus des tests unitaires */
if(project.hasProperty('profil') && project.ext.profil == 'ci') {
	check.dependsOn integrationTest
	integrationTest.dependsOn test
}
if(!project.hasProperty('profil') || (project.hasProperty('profil') && project.ext.profil == 'test')) {
	check.dependsOn test
}
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo





